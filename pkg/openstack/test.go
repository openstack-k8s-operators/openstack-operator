package openstack

import (
	"context"

	"github.com/openstack-k8s-operators/lib-common/modules/common/condition"
	"github.com/openstack-k8s-operators/lib-common/modules/common/configmap"
	"github.com/openstack-k8s-operators/lib-common/modules/common/helper"
	"github.com/openstack-k8s-operators/lib-common/modules/common/util"

	corev1beta1 "github.com/openstack-k8s-operators/openstack-operator/apis/core/v1beta1"
	ctrl "sigs.k8s.io/controller-runtime"
)

const (
	// config map generated by Keyston operator containing clouds.yaml
	CloudsConfigMap       = "openstack-config"
	TestOperatorConfigMap = "test-operator-config"

	TempestImageKey     = "tempest-image"
	TobikoImageKey      = "tobiko-image"
	HorizontestImageKey = "horizontest-image"
	AnsibletestImageKey = "ansibletest-image"
	CloudsKey           = "clouds-secret-name"
)

func ReconcileTest(ctx context.Context, instance *corev1beta1.OpenStackControlPlane, version *corev1beta1.OpenStackVersion, helper *helper.Helper) (ctrl.Result, error) {
	missingImageDefault := ""
	customData := map[string]string{
		TempestImageKey:     *getImg(version.Status.ContainerImages.TestTempestImage, &missingImageDefault),
		TobikoImageKey:      *getImg(version.Status.ContainerImages.TestTobikoImage, &missingImageDefault),
		HorizontestImageKey: *getImg(version.Status.ContainerImages.TestHorizontestImage, &missingImageDefault),
		AnsibletestImageKey: *getImg(version.Status.ContainerImages.TestAnsibletestImage, &missingImageDefault),
		CloudsKey:           CloudsConfigMap,
	}

	cms := []util.Template{
		{
			Name:          TestOperatorConfigMap,
			Namespace:     instance.Namespace,
			InstanceType:  instance.Kind,
			Labels:        nil,
			ConfigOptions: nil,
			CustomData:    customData,
		},
	}

	if err := configmap.EnsureConfigMaps(ctx, helper, instance, cms, nil); err != nil {
		instance.Status.Conditions.Set(condition.FalseCondition(
			corev1beta1.OpenStackControlPlaneTestCMReadyCondition,
			condition.ErrorReason,
			condition.SeverityWarning,
			corev1beta1.OpenStackControlPlaneTestCMReadyErrorMessage,
			err.Error()))

		return ctrl.Result{}, err
	}

	instance.Status.Conditions.Set(condition.TrueCondition(
		corev1beta1.OpenStackControlPlaneTestCMReadyCondition,
		corev1beta1.OpenStackControlPlaneTestCMReadyMessage,
	))

	return ctrl.Result{}, nil
}
