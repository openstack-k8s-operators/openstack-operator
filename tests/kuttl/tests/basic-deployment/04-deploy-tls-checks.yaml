apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  - script: |
      echo "Deleting secrets..."
      oc get secrets -l controller.cert-manager.io/fao=true -n $NAMESPACE -o json | jq -r '.items[] | select(.metadata.name | test("^rootca") | not) | "\(.metadata.namespace) \(.metadata.name)"' > /tmp/deleted-secrets.txt
      while IFS=' ' read -r ns secret; do oc delete secret "$secret" -n "$ns"; done < /tmp/deleted-secrets.txt

  - script: |
      echo "Waiting for OpenStack control plane to be ready..."
      oc wait openstackcontrolplane -n $NAMESPACE --for=condition=Ready --timeout=400s -l core.openstack.org/openstackcontrolplane

  - script: |
      echo "Checking if secrets are mounted in pods..."
      ERROR_FOUND=0
      ERRORS=""
      oc get pods -n $NAMESPACE -o json | jq -r '.items[] | {pod: .metadata.name, volumes: [.spec.volumes[]? | select(.secret != null or (.projected != null and .projected.sources[].secret != null)) | .secret.secretName // .projected.sources[].secret.name]} | @base64' > /tmp/pods_volumes.txt
      while IFS=' ' read -r ns secret; do
        if [[ "$secret" != *route* ]]; then
          matched_pods=$(cat /tmp/pods_volumes.txt | base64 --decode | jq -r --arg SECRET_NAME "$secret" 'select(.volumes[] == $SECRET_NAME) | .pod' | tr '\n' ', ')
          if [ -z "$matched_pods" ]; then
            ERRORS+="$secret not mounted in any pods\n"
            ERROR_FOUND=1
          fi
        fi
      done < /tmp/deleted-secrets.txt
      if [ "$ERROR_FOUND" -eq 0 ]; then
        echo "OK"
      else
        echo -e "NOT OK:\n$ERRORS"
      fi

  - script: |
      echo "Verifying certificates in routes..."
      ALL_MATCHED=1
      MISMATCHES=""
      oc get routes -n $NAMESPACE -o json | jq -r '.items[] | "\(.metadata.name) \(.spec.host) \(.spec.tls.certificate)"' > /tmp/routes-info.txt
      while IFS=' ' read -r ns secret_name; do
          if [[ "$secret_name" == *"public-route"* ]]; then
              route_name="${secret_name#cert-}"
              route_name="${route_name%-public-route}"
              route_name="${route_name}-public"
              route_cert=$(oc get route "$route_name" -n $NAMESPACE -o jsonpath='{.spec.tls.certificate}')
              secret_cert=$(oc get secret "$secret_name" -n $NAMESPACE -o jsonpath='{.data.tls\.crt}' | base64 --decode)
              if [[ "$route_cert" != "$secret_cert" ]]; then
                  MISMATCHES+="$route_name certificate does not match\n"
                  ALL_MATCHED=0
              fi
          fi
      done < /tmp/routes-info.txt
      if [ "$ALL_MATCHED" -eq 1 ]; then
        echo "OK"
      else
        echo -e "NOT OK:\n$MISMATCHES"
      fi

  - script: |
      echo "Checking ca-custom-kuttl.pem is present in combined-ca-bundle..."
      CUSTOM_CERT_CONTENT=$(oc get secret ca-custom-kuttl -n $NAMESPACE -o jsonpath="{.data['ca-custom-kuttl\.pem']}" | base64 --decode | tr -d '\n')
      TLS_BUNDLE_CONTENT=$(oc get secret combined-ca-bundle -n $NAMESPACE -o jsonpath="{.data['tls-ca-bundle\.pem']}" | base64 --decode | tr -d '\n')
      if [[ "$TLS_BUNDLE_CONTENT" == *"$CUSTOM_CERT_CONTENT"* ]]; then
        echo "OK"
      else
        echo "Not present"
      fi

  - script: |
      echo "Checking issuer of internal certificates..."
      INTERNAL_CERTS=$(oc get certificates -n $NAMESPACE | grep 'internal' | grep -v 'rootca' | awk '{print $1}')
      ISSUER_MISMATCHES=""
      ALL_MATCHED=1
      for cert in $INTERNAL_CERTS; do
        ISSUER=$(oc get certificate $cert -n $NAMESPACE -o jsonpath="{.spec.issuerRef.name}")
        if [ "$ISSUER" != "rootca-internal-custom" ]; then
          ISSUER_MISMATCHES+="$cert issued by $ISSUER, expected rootca-internal-custom\n"
          ALL_MATCHED=0
        fi
      done
      if [ "$ALL_MATCHED" -eq 1 ]; then
        echo "Internal certificates match the custom issuer rootca-internal-custom"
      else
        echo -e "Mismatched issuers found:\n$ISSUER_MISMATCHES"
      fi
